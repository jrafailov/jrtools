alias sqwatch='watch "squeue -u $USER -o \"%.18i %.10P %.100j %.8u %.2t %.10M %.6D %R\""'
alias sqrun='watch "squeue -t running -u $USER -o '\''%.10i %.100j %.8u %.4t %.12M %.8C %.10m %.25N %r'\''"'
alias sqrunmem='watch "squeue -t running -u $USER -o '\''%.10i %.100j %.8u %.4t %.12M %.8C %.10m %.25N %r'\'' | sort -k7 -r"'
alias sqpend='watch "squeue --sort=i -t pending -u $USER -o '\''%.10i %.100j %.8u %.4t %.12M %.8C %.10m %.25N %r'\''"'
alias squeue_pend_mem='watch "squeue --sort=i -t pending -u $USER -o '\''%.10i %.100j %.8u %.4t %.12M %.8C %.10m %.25N %r'\'' | sort -k7 -nr"'
alias sqr="watch squeue -u $USER -t running"
alias sqp="watch squeue -u $USER -t pending"
alias sq="watch squeue -u $USER"
alias sqrunn="watch 'squeue -u $USER -t running | wc -l'"
alias sqpendn="watch 'squeue -u $USER -t pending | wc -l'"
alias job-info='scontrol show job'

# ---------------------------------------------------------------------------
# Function: squeuelab
# Description:
#   Displays the SLURM queue for all users found in the ~/lab/home directory.
# Parameters:
#   None
# Returns:
#   Exits with status 1 if ~/lab/home directory doesn't exist or is empty.
# Usage:
#   squeuelab
# ---------------------------------------------------------------------------
function squeuelab {
	if [ ! -d ~/lab/home ]; then
		echo "Error: ~/lab/home directory not found"
		return 1
	fi
	
	users=$(ls ~/lab/home 2>/dev/null)
	if [ -z "$users" ]; then
		echo "Error: No users found in ~/lab/home"
		return 1
	fi
	
	user_list=$(echo $users | tr ' ' ',')
	squeue -u "$user_list" -o "%.18i %.10P %.100j %.8u %.2t %.10M %.6D %R"
}

# ---------------------------------------------------------------------------
# Function: jobstderr
# Description:
#   Retrieves the path to the standard error file associated with a SLURM job 
#   and displays its contents continuously in real-time.
# Parameters:
#   job_id - The unique identifier for the SLURM job.
# Returns:
#   Exits with status 1 if:
#     - No job_id is provided.
#     - The standard error file path cannot be determined.
# Usage:
#   jobstderr <job_id>
# ---------------------------------------------------------------------------
function job_stderr {
 if [ -z "$1" ]; then
 echo "Usage: jobstderr <job_id>"
 return 1
 fi
 stderr_file=$(scontrol show job "$1" | grep -oP 'StdErr=\K\S+')
 if [ -z "$stderr_file" ]; then
 echo "StdErr file not found for job $1"
 return 1
 fi
 tail -f "$stderr_file"
}

# ---------------------------------------------------------------------------
# Function: jobcwd
# Description:
#   Changes the current working directory of the shell to the working directory
#   associated with a specified SLURM job.
# Parameters:
#   job_id - The unique identifier for the SLURM job.
# Returns:
#   Exits with status 1 if:
#     - No job_id is provided.
#     - The working directory information cannot be retrieved.
# Usage:
#   jobcwd <job_id>
# ---------------------------------------------------------------------------
function job_cwd {
 if [ -z "$1" ]; then
 echo "Usage: jobcwd <job_id>"
 return 1
 fi
 cwd=$(scontrol show job "$1" | grep -oP 'WorkDir=\K\S+')
 if [ -z "$cwd" ]; then
 echo "Working directory not found for job $1"
 return 1
 fi
 cd "$cwd" && echo "Switched to $cwd"
}